version
library(shiny)
# setwd("D:/code/R/shiny")
setwd("H:/My Drive/code/R/shiny")
#setwd("H:/My Drive/code/R/shiny/app_afmodel")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#setwd("H:/My Drive/code/R/shiny/app_afmodel")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
devtools::install_github("RinteRface/shinydashboardPlus")
library(shinydashboardPlus)
shinydashboardPlusGallery()
install.packages("shinydashboardPlus")
install.packages("shinydashboardPlus")
install.packages("shinydashboardPlus")
install.packages("shinydashboardPlus")
library(shinydashboardPlus)
shinydashboardPlusGallery()
install.packages("shinydashboardPlus")
install.packages("shinydashboardPlus")
install.packages("shinydashboardPlus")
library(shinydashboardPlus)
shinydashboardPlusGallery()
install.packages("styler")
install.packages("shinyAce")
install.packages("shinyWidgets")
install.packages("shinyjqui")
shinydashboardPlusGallery()
install.packages("shinyEffects")
shinydashboardPlusGallery()
devtools::install_github("RinteRface/shinydashboardPlus")
devtools::install_github("RinteRface/shinydashboardPlus")
shiny::runApp('C:/Degi/GDrive_code/code/R/shiny/forcastree')
shiny::runApp('C:/Degi/GDrive_code/code/R/shiny/forcastree')
library(devtools)
install_github("degi/threeforest")
install.packages("fs")
install.packages("vctrs")
install.packages("digest")
install.packages("xfun")
install.packages("htmltools")
library(devtools)
install_github("degi/threeforest")
shiny::runApp('C:/Degi/GDrive_code/code/R/shiny/forcastree')
shiny::runApp('C:/Degi/GDrive_code/code/R/shiny/rfallow')
shiny::runApp('C:/Degi/GDrive_code/code/R/shiny/rfallow')
library(shiny)
runGitHub("forcastree", "degi")
runApp('C:/Degi/GDrive_code/code/R/shiny/forcastree')
runApp('C:/Degi/GDrive_code/code/R/shiny/forcastree')
library(shiny)
runGitHub("forcastree", "degi")
shiny::runApp('C:/Degi/GDrive_code/code/R/shiny/rfallow')
runApp('C:/Degi/GDrive_code/code/R/shiny/rfallow')
runApp('C:/Degi/GDrive_code/code/R/shiny/forcastree')
install.packages(c("askpass", "classInt", "cpp11", "credentials", "curl", "downlit", "dplyr", "DT", "fansi", "geometries", "gert", "ggplot2", "googlePolylines", "gtable", "httpuv", "httr", "labeling", "leafem", "leaflet", "leaflet.providers", "lwgeom", "mapview", "markdown", "MASS", "openssl", "openxlsx2", "packrat", "pkgbuild", "pkgload", "plyr", "prettyunits", "processx", "promises", "purrr", "ragg", "raster", "Rcpp", "readxl", "rematch", "remotes", "rsconnect", "rstudioapi", "sf", "sfheaders", "shiny", "shinyWidgets", "sp", "stars", "styler", "svglite", "sys", "systemfonts", "terra", "testthat", "textshaping", "units", "usethis", "utf8", "uuid", "V8", "viridis", "vtree", "webshot", "withr", "wk", "xml2"))
install.packages(c("askpass", "classInt", "cpp11", "credentials", "curl", "downlit", "dplyr", "DT", "fansi", "geometries", "gert", "ggplot2", "googlePolylines", "gtable", "httpuv", "httr", "labeling", "leafem", "leaflet", "leaflet.providers", "lwgeom", "mapview", "markdown", "MASS", "openssl", "openxlsx2", "packrat", "pkgbuild", "pkgload", "plyr", "prettyunits", "processx", "promises", "purrr", "ragg", "raster", "Rcpp", "readxl", "rematch", "remotes", "rsconnect", "rstudioapi", "sf", "sfheaders", "shiny", "shinyWidgets", "sp", "stars", "styler", "svglite", "sys", "systemfonts", "terra", "testthat", "textshaping", "units", "usethis", "utf8", "uuid", "V8", "viridis", "vtree", "webshot", "withr", "wk", "xml2"))
install.packages(c("askpass", "classInt", "cpp11", "credentials", "curl", "downlit", "dplyr", "DT", "fansi", "geometries", "gert", "ggplot2", "googlePolylines", "gtable", "httpuv", "httr", "labeling", "leafem", "leaflet", "leaflet.providers", "lwgeom", "mapview", "markdown", "MASS", "openssl", "openxlsx2", "packrat", "pkgbuild", "pkgload", "plyr", "prettyunits", "processx", "promises", "purrr", "ragg", "raster", "Rcpp", "readxl", "rematch", "remotes", "rsconnect", "rstudioapi", "sf", "sfheaders", "shiny", "shinyWidgets", "sp", "stars", "styler", "svglite", "sys", "systemfonts", "terra", "testthat", "textshaping", "units", "usethis", "utf8", "uuid", "V8", "viridis", "vtree", "webshot", "withr", "wk", "xml2"))
install.packages(c("askpass", "classInt", "cpp11", "credentials", "curl", "downlit", "dplyr", "DT", "fansi", "geometries", "gert", "ggplot2", "googlePolylines", "gtable", "httpuv", "httr", "labeling", "leafem", "leaflet", "leaflet.providers", "lwgeom", "mapview", "markdown", "MASS", "openssl", "openxlsx2", "packrat", "pkgbuild", "pkgload", "plyr", "prettyunits", "processx", "promises", "purrr", "ragg", "raster", "Rcpp", "readxl", "rematch", "remotes", "rsconnect", "rstudioapi", "sf", "sfheaders", "shiny", "shinyWidgets", "sp", "stars", "styler", "svglite", "sys", "systemfonts", "terra", "testthat", "textshaping", "units", "usethis", "utf8", "uuid", "V8", "viridis", "vtree", "webshot", "withr", "wk", "xml2"))
install.packages(c("askpass", "classInt", "cpp11", "credentials", "curl", "downlit", "dplyr", "DT", "fansi", "geometries", "gert", "ggplot2", "googlePolylines", "gtable", "httpuv", "httr", "labeling", "leafem", "leaflet", "leaflet.providers", "lwgeom", "mapview", "markdown", "MASS", "openssl", "openxlsx2", "packrat", "pkgbuild", "pkgload", "plyr", "prettyunits", "processx", "promises", "purrr", "ragg", "raster", "Rcpp", "readxl", "rematch", "remotes", "rsconnect", "rstudioapi", "sf", "sfheaders", "shiny", "shinyWidgets", "sp", "stars", "styler", "svglite", "sys", "systemfonts", "terra", "testthat", "textshaping", "units", "usethis", "utf8", "uuid", "V8", "viridis", "vtree", "webshot", "withr", "wk", "xml2"))
install.packages(c("askpass", "classInt", "cpp11", "credentials", "curl", "downlit", "dplyr", "DT", "fansi", "geometries", "gert", "ggplot2", "googlePolylines", "gtable", "httpuv", "httr", "labeling", "leafem", "leaflet", "leaflet.providers", "lwgeom", "mapview", "markdown", "MASS", "openssl", "openxlsx2", "packrat", "pkgbuild", "pkgload", "plyr", "prettyunits", "processx", "promises", "purrr", "ragg", "raster", "Rcpp", "readxl", "rematch", "remotes", "rsconnect", "rstudioapi", "sf", "sfheaders", "shiny", "shinyWidgets", "sp", "stars", "styler", "svglite", "sys", "systemfonts", "terra", "testthat", "textshaping", "units", "usethis", "utf8", "uuid", "V8", "viridis", "vtree", "webshot", "withr", "wk", "xml2"))
install.packages(c("askpass", "classInt", "cpp11", "credentials", "curl", "downlit", "dplyr", "DT", "fansi", "geometries", "gert", "ggplot2", "googlePolylines", "gtable", "httpuv", "httr", "labeling", "leafem", "leaflet", "leaflet.providers", "lwgeom", "mapview", "markdown", "MASS", "openssl", "openxlsx2", "packrat", "pkgbuild", "pkgload", "plyr", "prettyunits", "processx", "promises", "purrr", "ragg", "raster", "Rcpp", "readxl", "rematch", "remotes", "rsconnect", "rstudioapi", "sf", "sfheaders", "shiny", "shinyWidgets", "sp", "stars", "styler", "svglite", "sys", "systemfonts", "terra", "testthat", "textshaping", "units", "usethis", "utf8", "uuid", "V8", "viridis", "vtree", "webshot", "withr", "wk", "xml2"))
install.packages(c("openxlsx2", "readxl"))
shiny::runApp('C:/Degi/GDrive_code/code/R/shiny/rfallow')
runApp('C:/Degi/GDrive_code/code/R/shiny/rfallow')
version
version
library(shiny)
runGitHub("rfallow", "degi")
install.packages("shinydashboardPlus")
shiny::runApp('C:/Degi/GDrive_code/code/R/shiny/rfallow')
install.packages("bs4Dash")
runApp('C:/Degi/GDrive_code/code/R/shiny/rfallow')
runApp('C:/Degi/GDrive_code/code/R/shiny/rfallow')
shiny::runApp('C:/Degi/GDrive_code/code/R/shiny/rfallow')
shiny::runApp('C:/Degi/GDrive_code/code/R/shiny/rfallow')
shiny::runApp('C:/Degi/GDrive_code/code/R/shiny/rfallow')
shiny::runApp('C:/Degi/GDrive_code/code/R/shiny/rfallow')
runApp('C:/Degi/GDrive_code/code/R/shiny/rfallow')
runApp('C:/Degi/GDrive_code/code/R/shiny/rfallow')
runApp('C:/Degi/GDrive_code/code/R/shiny/rfallow')
runApp('C:/Degi/GDrive_code/code/R/shiny/rfallow')
shiny::runApp('C:/Degi/GDrive_code/code/R/shiny/rfallow')
runApp('C:/Degi/GDrive_code/code/R/shiny/rfallow')
shiny::runApp('C:/Degi/GDrive_code/code/R/shiny/rfallow')
runApp('C:/Degi/GDrive_code/code/R/shiny/rfallow')
shiny::runApp('C:/Degi/GDrive_code/code/R/shiny/rfallow')
shiny::runGitHub("dreamRs/fresh", subdir = "inst/examples/create")
runApp('C:/Degi/GDrive_code/code/R/shiny/rfallow')
runApp('C:/Degi/GDrive_code/code/R/shiny/rfallow')
search_vars_bs4dash("navbar")
search_vars_bs4dash("navbar")
runApp('C:/Degi/GDrive_code/code/R/shiny/rfallow')
runApp('C:/Degi/GDrive_code/code/R/shiny/rfallow')
runApp('C:/Degi/GDrive_code/code/R/shiny/rfallow')
runApp('C:/Degi/GDrive_code/code/R/shiny/rfallow')
runApp('C:/Degi/GDrive_code/code/R/shiny/rfallow')
runApp('C:/Degi/GDrive_code/code/R/shiny/rfallow')
runApp('C:/Degi/GDrive_code/code/R/shiny/rfallow')
all_vars <- search_vars_bs4dash()
View(all_vars)
runApp('C:/Degi/GDrive_code/code/R/shiny/rfallow')
runApp('C:/Degi/GDrive_code/code/R/shiny/rfallow')
runApp('C:/Degi/GDrive_code/code/R/shiny/rfallow')
runApp('C:/Degi/GDrive_code/code/R/shiny/rfallow')
runApp('C:/Degi/GDrive_code/code/R/shiny/rfallow')
runApp('C:/Degi/GDrive_code/code/R/shiny/rfallow')
runApp('C:/Degi/GDrive_code/code/R/shiny/rfallow')
shiny::runApp('C:/Degi/GDrive_code/code/R/shiny/rfallow')
shiny::runApp('C:/Degi/GDrive_code/code/R/shiny/rfallow')
runGitHub("rfallow", "degi")
library(shiny)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(rsconnect)
rsconnect::setAccountInfo(name='degi', token='021D2403C70A09BF07207B23F1E8A008', secret='a74tq8NfCveMOpLv911lIFh1Nq9xIXl3XZxuiG/V')
rsconnect::deployApp('rfallow')
div(span(div(
icon("upload")
|> tooltip("Upload data", options = list(customClass = "custom-tooltip"))) |>
popover(
title = div(icon("upload"), "Upload data"),
id = ns("upload_pop"),
fileInput(ns("upload_file"), NULL, accept = c(".csv"))
)
), excelR::excelOutput(ns("table_edit")))
shiny::runApp('genriver')
div(span(style = "text-align: center;",
div(
icon("upload")
|> tooltip("Upload data", options = list(customClass = "custom-tooltip"))) |>
popover(
title = div(icon("upload"), "Upload data"),
id = ns("upload_pop"),
fileInput(ns("upload_file"), NULL, accept = c(".csv"))
)
), excelR::excelOutput(ns("table_edit")))
runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
tabel_edit_server <- function(id,
data,
col_title = NULL,
col_type = NULL,
col_disable = NULL,
allowRowModif = F,
nrow = 0,
csvFileName = "table_data") {
moduleServer(id, function(input, output, session) {
if (!is.null(data)) {
col_names <- colnames(data)
if (is.null(col_title))
col_title <- tools::toTitleCase(col_names)
col_type_data <- sapply(data, class)
if (is.null(col_type)) {
#dropdown
col_type <- rep(NA, ncol(data))
col_render <- col_type
col_width <- col_type
col_align <- rep("left", ncol(data))
idx <- which(col_type_data == "Date")
for (i in idx) {
col_type[i] <- "calendar"
}
idx <- which(col_type_data == "logical")
for (i in idx) {
col_type[i] <- "checkbox"
}
idx <- which(col_names == "color")
for (i in idx) {
col_type[i] <- "color"
col_title[i] <- ""
col_render[i] <- "square"
col_align[i] <- "center"
col_width[i] <- 30
}
idx <- which(col_type_data == "numeric")
for (i in idx) {
col_align[i] <- "right"
}
}
if (is.null(col_disable)) {
col_disable <- rep(F, ncol(data))
}
}
data_column <- data.frame(
title = col_title,
type = col_type,
render = col_render,
align = col_align,
width = col_width,
readOnly = col_disable
)
output$table_edit <- excelR::renderExcel({
ns <- session$ns
df <- data
if (is.null(df))
return()
excelR::excelTable(
data = df,
columns = data_column,
tableOverflow = T,
tableWidth = "100%",
tableHeight = "100%",
allowDeleteColumn = F,
allowRenameColumn = F,
allowInsertColumn = F,
allowDeleteRow = allowRowModif,
allowInsertRow = allowRowModif,
rowDrag = allowRowModif,
minDimensions = c(NA, nrow),
autoIncrement = T,
csvFileName = csvFileName,
defaultColWidth = 100,
includeHeadersOnDownload = T
)
})
table_data <- reactiveVal()
observeEvent(input$table_edit, {
inp <- input$table_edit
df_input <- excel_to_R(inp)
names(df_input) <- col_names
df_input[df_input == ""] <- NA
df_input <- df_input[rowSums(!is.na(df_input)) > 0, ]
idx <- which(col_type_data == "numeric")
for (i in idx) {
df_input[[i]] <- as.numeric(df_input[[i]])
}
table_data(df_input)
})
observeEvent(input$upload_file, {
print(input$upload_file)
fpath <- input$upload_file$datapath
df <- read.csv(fpath)
print(df)
})
return(table_data)
})
}
runApp('genriver')
shiny::runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
div(
# card_header(
#   class = "d-flex justify-content-between",
style = "height:calc(100% - 30px);",
span(title,
div(
style = "float:right;",
actionButton(ns("btn"), "",icon = icon("upload"), class = "toolbar_button")
# icon("upload")
|> tooltip("Upload data", options = list(customClass = "custom-tooltip"))
) |>
popover(
title = div(icon("upload"), "Upload data"),
id = ns("upload_pop"),
fileInput(ns("upload_file"), NULL, accept = c(".csv"))
)
),
excelR::excelOutput(ns("table_edit"), height = "100%")
)
runApp('genriver')
div(
style = "height:calc(100% - 30px);",
span(
div(
style = "float:right;",
actionButton(ns("btn"), "",icon = icon("upload"), class = "toolbar_button")
# icon("upload")
|> tooltip("Upload data", options = list(customClass = "custom-tooltip"))
) |>
popover(
title = div(icon("upload"), "Upload data"),
id = ns("upload_pop"),
fileInput(ns("upload_file"), NULL, accept = c(".csv"))
),
title
),
excelR::excelOutput(ns("table_edit"), height = "100%")
)
runApp('genriver')
div(
style = "height:calc(100% - 30px);",
span(
div(
style = "float:right;",
actionButton(ns("upload_btn"), "",icon = icon("upload"), class = "toolbar_button")
# icon("upload")
|> tooltip("Upload data", id = ns("upload_tt"), options = list(customClass = "custom-tooltip"))
) |>
popover(
title = div(icon("upload"), "Upload data"),
id = ns("upload_pop"),
fileInput(ns("upload_file"), NULL, accept = c(".csv"))
),
title
),
excelR::excelOutput(ns("table_edit"), height = "100%")
)
runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
ifelse(T, "a", "b")
runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
date()
year(date())
runApp('genriver')
install.packages(seas)
install.packages("seas")
d <- date()
mkann(d)
library(seas)
mkann(d)
d
mkann(as.Date(d))
d <- as.Date("2024/01/25")
mkann(d)
yearDays(d)
year.length(d)
mkseas(d)
d
library(lubridate)
yday(d)
d <- as.Date("2024/03/25")
yday(d)
runApp('genriver')
runApp('genriver')
runApp('genriver')
table_data <- reactiveVal(data)
runApp('genriver')
d
year(d)
month(d)
?plot_ly
runApp('genriver')
chart_color <- c(
paletteer_d("ggthemes::calc"),
paletteer_d("ggsci::schwifty_rickandmorty"),
paletteer_d("ggsci::default_uchicago"),
paletteer_d("ggthemes::Classic_10"),
paletteer_d("ggsci::default_jco"),
paletteer_d("ggsci::springfield_simpsons"),
paletteer_d("ggsci::light_uchicago"),
paletteer_d("ggthemes::stata_s2color"),
paletteer_d("RColorBrewer::Set1"),
paletteer_d("RColorBrewer::Set2"),
paletteer_d("RColorBrewer::Set3"),
paletteer_dynamic("cartography::multi.pal", 20)
)
light_color <- c(
paletteer_d("ggsci::legacy_tron"),
paletteer_d("ggthemes::Superfishel_Stone"),
paletteer_d("ggthemes::Classic_10_Light"),
paletteer_d("ggpomological::pomological_palette"),
paletteer_d("ggthemes::Tableau_10"),
paletteer_d("ggthemes::Classic_10_Medium"),
paletteer_dynamic("cartography::pastel.pal", 20)
)
get_color <- function(idx = NULL, is_light = F) {
if (is_light) {
cl <- light_color
} else {
cl <- chart_color
}
max_idx <- length(cl)
if (is.null(idx))
idx <- sample.int(max_idx, 1)
idx <- abs(idx)
idx <- idx %% max_idx
idx[idx == 0] <- max_idx
return(cl[idx])
}
get_color(5)
get_color(c(1:5)
get_color(c(1:5))
runApp('genriver')
runApp('genriver')
shiny::runApp('genriver')
shiny::runApp('genriver')
shiny::runApp('genriver')
runApp('genriver')
runApp('genriver')
runApp('genriver')
install.packages('shinyjqui')
runApp('genriver')
runApp('genriver')
runApp('genriver')
a,b,c,d <- 2
runApp('genriver')
data_column <- data.frame(
title = col_title,
type = col_type,
render = col_render,
align = col_align,
width = col_width,
readOnly = col_disable
)
runApp('genriver')
setwd("D:/google_drive/ecomodels/code/R/shiny/genriver/R")
runApp('D:/google_drive/ecomodels/code/R/shiny/genriver')
list_to_df_json <- function(d) {
return(jsonlite::fromJSON(jsonlite::toJSON(d)))
}
runApp('D:/google_drive/ecomodels/code/R/shiny/genriver')
runApp('D:/google_drive/ecomodels/code/R/shiny/genriver')
runApp('D:/google_drive/ecomodels/code/R/shiny/genriver')
return((flow_m3psec/area_m2)*day_to_sec*1000)
runApp('D:/google_drive/ecomodels/code/R/shiny/genriver')
runApp('D:/google_drive/ecomodels/code/R/shiny/genriver')
runApp('D:/google_drive/ecomodels/code/R/shiny/genriver')
runApp('D:/google_drive/ecomodels/code/R/shiny/genriver')
